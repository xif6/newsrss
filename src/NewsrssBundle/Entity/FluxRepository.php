<?php

namespace NewsrssBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * FluxRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FluxRepository extends EntityRepository
{
    /**
     * Used by Elastica to transform results to model
     *
     * @param string $entityAlias
     * @return  Doctrine\ORM\QueryBuilder
     */
    public function createSearchQueryBuilder($entityAlias)
    {
        $qb = $this->createQueryBuilder($entityAlias);

        $qb->select($entityAlias, 'fh')
            ->leftjoin($entityAlias . '.http', 'fh');

        return $qb;
    }

    /**
     *
     * @param int $limit
     * @return array
     */
    public function lastFlux($limit = 10)
    {
        $flux = $this->findBy(['display' => true], ['createdAt' => 'DESC'], $limit);

        return $flux;
    }

    /**
     * Flux that have the most users
     *
     * @param int $limit
     * @param bool $withNbUsers
     * @return array
     */
    public function mostUsersByCategory($categoryId, $andWhere = [], $withNbUsers = false)
    {
        $qb = $this->createQueryBuilder('f');
        $qb->addSelect('count(f) AS ' . ($withNbUsers ? '' : 'HIDDEN') . ' nbUsers')
            ->addSelect('fh')
            ->innerjoin('f.categories', 'c', 'WITH', $qb->expr()->eq('c.id', ':category'))
            ->innerjoin('f.userFlux', 'uf')
            ->leftjoin('f.http', 'fh')
            ->andWhere($qb->expr()->eq('f.display', ':display'))
            ->setParameter('display', true)
            ->setParameter('category', $categoryId);
        if ($andWhere) {
            foreach ($andWhere as $field => $value) {
                $qb->andWhere($qb->expr()->eq('f.' . $field, ':' . $field))
                    ->setParameter($field, $value);
            }
        }
        $qb->groupBy('f.id')
            ->addOrderBy('nbUsers', 'DESC')
            ->addOrderBy('f.site', 'ASC')
            ->addOrderBy('f.name', 'ASC');
        $fluxes = $qb
            ->getQuery()
            ->execute();

        return $fluxes;
    }

    /**
     * Flux that have the most users
     *
     * @param int $limit
     * @param bool $withNbUsers
     * @return array
     */
    public function mostUsers($limit = 10, $andWhere = [], $withNbUsers = false, $withSite = false)
    {
        $qb = $this->createQueryBuilder('f');
        $qb->addSelect('count(f) AS ' . ($withNbUsers ? '' : 'HIDDEN') . ' nbUsers')
            ->addSelect('fh')
            ->innerjoin('f.userFlux', 'uf')
            ->leftjoin('f.http', 'fh')
            ->andWhere($qb->expr()->eq('f.display', ':display'))
            ->setParameter('display', true);
        if ($withSite) {
            $qb->addSelect('s')->innerjoin('f.site', 's');
        }
        if ($andWhere) {
            foreach ($andWhere as $field => $value) {
                $qb->andWhere($qb->expr()->eq('f.' . $field, ':' . $field))
                    ->setParameter($field, $value);
            }
        }
        $qb->groupBy('f.id')
            ->orderBy('nbUsers', 'DESC');
        if ($limit) {
            $qb->setMaxResults($limit);
        }
        $fluxes = $qb
            ->getQuery()
            ->execute();

        return $fluxes;
    }

    public function findWithUser($user = null)
    {
        $qb = $this->createQueryBuilder('f');
        $qb->innerjoin('f.userFlux', 'uf');
        if ($user) {
            $qb->andWhere($qb->expr()->eq('uf.user', ':user'))
                ->setParameter('user', $user);
        }
        $fluxes = $qb
            ->getQuery()
            ->execute();

        return $fluxes;
    }

    /**
     * Flux that have the most users (in DQL query)
     *
     * @param int $limit
     * @param bool $withNbUsers
     * @return array
     */
    public function mostUsersDQL($limit = 10, $withNbUsers = false)
    {
        $qb = $this->createQueryBuilder('f');
        $qb->innerjoin('f.userFlux', 'uf');
        $fluxes = $qb
            ->getQuery()
            ->execute();

        return $fluxes;
    }
}
